// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/cyberguru1/stage-two/ent/organisation"
	"github.com/cyberguru1/stage-two/ent/schema"
	"github.com/cyberguru1/stage-two/ent/user"
	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	organisationFields := schema.Organisation{}.Fields()
	_ = organisationFields
	// organisationDescOrgid is the schema descriptor for orgid field.
	organisationDescOrgid := organisationFields[0].Descriptor()
	// organisation.DefaultOrgid holds the default value on creation for the orgid field.
	organisation.DefaultOrgid = organisationDescOrgid.Default.(func() uuid.UUID)
	// organisationDescName is the schema descriptor for name field.
	organisationDescName := organisationFields[1].Descriptor()
	// organisation.NameValidator is a validator for the "name" field. It is called by the builders before save.
	organisation.NameValidator = organisationDescName.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUserid is the schema descriptor for userid field.
	userDescUserid := userFields[0].Descriptor()
	// user.DefaultUserid holds the default value on creation for the userid field.
	user.DefaultUserid = userDescUserid.Default.(func() uuid.UUID)
	// userDescFirstName is the schema descriptor for firstName field.
	userDescFirstName := userFields[1].Descriptor()
	// user.FirstNameValidator is a validator for the "firstName" field. It is called by the builders before save.
	user.FirstNameValidator = userDescFirstName.Validators[0].(func(string) error)
	// userDescLastName is the schema descriptor for lastName field.
	userDescLastName := userFields[2].Descriptor()
	// user.LastNameValidator is a validator for the "lastName" field. It is called by the builders before save.
	user.LastNameValidator = userDescLastName.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[3].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[4].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
}
