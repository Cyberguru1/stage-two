// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserid holds the string denoting the userid field in the database.
	FieldUserid = "userid"
	// FieldFirstName holds the string denoting the firstname field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the lastname field in the database.
	FieldLastName = "last_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// EdgeOrganisations holds the string denoting the organisations edge name in mutations.
	EdgeOrganisations = "organisations"
	// Table holds the table name of the user in the database.
	Table = "users"
	// OrganisationsTable is the table that holds the organisations relation/edge.
	OrganisationsTable = "organisations"
	// OrganisationsInverseTable is the table name for the Organisation entity.
	// It exists in this package in order to avoid circular dependency with the "organisation" package.
	OrganisationsInverseTable = "organisations"
	// OrganisationsColumn is the table column denoting the organisations relation/edge.
	OrganisationsColumn = "user_organisations"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUserid,
	FieldFirstName,
	FieldLastName,
	FieldEmail,
	FieldPassword,
	FieldPhone,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUserid holds the default value on creation for the "userid" field.
	DefaultUserid func() uuid.UUID
	// FirstNameValidator is a validator for the "firstName" field. It is called by the builders before save.
	FirstNameValidator func(string) error
	// LastNameValidator is a validator for the "lastName" field. It is called by the builders before save.
	LastNameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserid orders the results by the userid field.
func ByUserid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserid, opts...).ToFunc()
}

// ByFirstName orders the results by the firstName field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the lastName field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByOrganisationsCount orders the results by organisations count.
func ByOrganisationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrganisationsStep(), opts...)
	}
}

// ByOrganisations orders the results by organisations terms.
func ByOrganisations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganisationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOrganisationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganisationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrganisationsTable, OrganisationsColumn),
	)
}
